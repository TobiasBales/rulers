# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-test` gem.
# Please instead update this file by running `bin/tapioca gem rack-test`.

# :nocov:
module Rack
  class << self
    # source://rack/3.0.0/lib/rack/version.rb#31
    def release; end

    # source://rack/3.0.0/lib/rack/version.rb#23
    def version; end
  end
end

module Rack::Auth; end

class Rack::Auth::AbstractHandler
  # source://rack/3.0.0/lib/rack/auth/abstract/handler.rb#15
  def initialize(app, realm = T.unsafe(nil), &authenticator); end

  # source://rack/3.0.0/lib/rack/auth/abstract/handler.rb#13
  def realm; end

  # source://rack/3.0.0/lib/rack/auth/abstract/handler.rb#13
  def realm=(_arg0); end

  private

  # source://rack/3.0.0/lib/rack/auth/abstract/handler.rb#31
  def bad_request; end

  # source://rack/3.0.0/lib/rack/auth/abstract/handler.rb#22
  def unauthorized(www_authenticate = T.unsafe(nil)); end
end

class Rack::Auth::AbstractRequest
  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#9
  def initialize(env); end

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#33
  def params; end

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#25
  def parts; end

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#17
  def provided?; end

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#13
  def request; end

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#29
  def scheme; end

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#21
  def valid?; end

  private

  # source://rack/3.0.0/lib/rack/auth/abstract/request.rb#42
  def authorization_key; end
end

# source://rack/3.0.0/lib/rack/auth/abstract/request.rb#40
Rack::Auth::AbstractRequest::AUTHORIZATION_KEYS = T.let(T.unsafe(nil), Array)

class Rack::Auth::Basic < ::Rack::Auth::AbstractHandler
  # source://rack/3.0.0/lib/rack/auth/basic.rb#18
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/auth/basic.rb#37
  def challenge; end

  # source://rack/3.0.0/lib/rack/auth/basic.rb#41
  def valid?(auth); end
end

class Rack::Auth::Basic::Request < ::Rack::Auth::AbstractRequest
  # source://rack/3.0.0/lib/rack/auth/basic.rb#46
  def basic?; end

  # source://rack/3.0.0/lib/rack/auth/basic.rb#50
  def credentials; end

  # source://rack/3.0.0/lib/rack/auth/basic.rb#54
  def username; end
end

module Rack::Auth::Digest; end

class Rack::Auth::Digest::MD5 < ::Rack::Auth::AbstractHandler
  # source://rack/3.0.0/lib/rack/auth/digest.rb#150
  def initialize(app, realm = T.unsafe(nil), opaque = T.unsafe(nil), &authenticator); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#163
  def call(env); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#146
  def opaque; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#146
  def opaque=(_arg0); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#148
  def passwords_hashed=(_arg0); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#159
  def passwords_hashed?; end

  private

  # source://rack/3.0.0/lib/rack/auth/digest.rb#238
  def A1(auth, password); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#242
  def A2(auth); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#228
  def H(data); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#234
  def KD(secret, data); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#203
  def challenge(hash = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#246
  def digest(auth, password); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#228
  def md5(data); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#192
  def params(hash = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#207
  def valid?(auth); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#223
  def valid_digest?(auth); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#219
  def valid_nonce?(auth); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#215
  def valid_opaque?(auth); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#211
  def valid_qop?(auth); end
end

# source://rack/3.0.0/lib/rack/auth/digest.rb#190
Rack::Auth::Digest::MD5::QOP = T.let(T.unsafe(nil), String)

class Rack::Auth::Digest::Nonce
  # source://rack/3.0.0/lib/rack/auth/digest.rb#31
  def initialize(timestamp = T.unsafe(nil), given_digest = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#39
  def digest; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#51
  def fresh?; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#47
  def stale?; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#35
  def to_s; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#43
  def valid?; end

  class << self
    # source://rack/3.0.0/lib/rack/auth/digest.rb#27
    def parse(string); end

    # source://rack/3.0.0/lib/rack/auth/digest.rb#24
    def private_key; end

    # source://rack/3.0.0/lib/rack/auth/digest.rb#24
    def private_key=(_arg0); end

    # source://rack/3.0.0/lib/rack/auth/digest.rb#24
    def time_limit; end

    # source://rack/3.0.0/lib/rack/auth/digest.rb#24
    def time_limit=(_arg0); end
  end
end

class Rack::Auth::Digest::Params < ::Hash
  # source://rack/3.0.0/lib/rack/auth/digest.rb#76
  def initialize; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#82
  def [](k); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#86
  def []=(k, v); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#98
  def quote(str); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#92
  def to_s; end

  class << self
    # source://rack/3.0.0/lib/rack/auth/digest.rb#66
    def dequote(str); end

    # source://rack/3.0.0/lib/rack/auth/digest.rb#59
    def parse(str); end

    # source://rack/3.0.0/lib/rack/auth/digest.rb#72
    def split_header_value(str); end
  end
end

# source://rack/3.0.0/lib/rack/auth/digest.rb#90
Rack::Auth::Digest::Params::UNQUOTED = T.let(T.unsafe(nil), Array)

class Rack::Auth::Digest::Request < ::Rack::Auth::AbstractRequest
  # source://rack/3.0.0/lib/rack/auth/digest.rb#113
  def correct_uri?; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#109
  def digest?; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#105
  def method; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#129
  def method_missing(sym, *args); end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#117
  def nonce; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#121
  def params; end

  # source://rack/3.0.0/lib/rack/auth/digest.rb#125
  def respond_to?(sym, *_arg1); end
end

class Rack::BodyProxy
  # source://rack/3.0.0/lib/rack/body_proxy.rb#10
  def initialize(body, &block); end

  # source://rack/3.0.0/lib/rack/body_proxy.rb#23
  def close; end

  # source://rack/3.0.0/lib/rack/body_proxy.rb#35
  def closed?; end

  # source://rack/3.0.0/lib/rack/body_proxy.rb#40
  def method_missing(method_name, *args, **_arg2, &block); end

  private

  # source://rack/3.0.0/lib/rack/body_proxy.rb#17
  def respond_to_missing?(method_name, include_all = T.unsafe(nil)); end
end

class Rack::Builder
  # source://rack/3.0.0/lib/rack/builder.rb#114
  def initialize(default_app = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/builder.rb#261
  def call(env); end

  # source://rack/3.0.0/lib/rack/builder.rb#244
  def freeze_app; end

  # source://rack/3.0.0/lib/rack/builder.rb#237
  def map(path, &block); end

  # source://rack/3.0.0/lib/rack/builder.rb#192
  def run(app = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/builder.rb#249
  def to_app; end

  # source://rack/3.0.0/lib/rack/builder.rb#149
  def use(middleware, *args, **_arg2, &block); end

  # source://rack/3.0.0/lib/rack/builder.rb#208
  def warmup(prc = T.unsafe(nil), &block); end

  private

  # source://rack/3.0.0/lib/rack/builder.rb#269
  def generate_map(default_app, mapping); end

  class << self
    # source://rack/3.0.0/lib/rack/builder.rb#126
    def app(default_app = T.unsafe(nil), &block); end

    # source://rack/3.0.0/lib/rack/builder.rb#87
    def load_file(path); end

    # source://rack/3.0.0/lib/rack/builder.rb#102
    def new_from_string(builder_script, file = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/builder.rb#65
    def parse_file(path); end
  end
end

# source://rack/3.0.0/lib/rack/builder.rb#39
Rack::Builder::UTF_8_BOM = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#19
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#20
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#21
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

class Rack::Cascade
  # source://rack/3.0.0/lib/rack/cascade.rb#24
  def initialize(apps, cascade_for = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/cascade.rb#59
  def <<(app); end

  # source://rack/3.0.0/lib/rack/cascade.rb#59
  def add(app); end

  # source://rack/3.0.0/lib/rack/cascade.rb#16
  def apps; end

  # source://rack/3.0.0/lib/rack/cascade.rb#35
  def call(env); end

  # source://rack/3.0.0/lib/rack/cascade.rb#64
  def include?(app); end
end

# source://rack/3.0.0/lib/rack/cascade.rb#13
Rack::Cascade::NotFound = T.let(T.unsafe(nil), Array)

class Rack::Chunked
  include ::Rack::Utils

  # source://rack/3.0.0/lib/rack/chunked.rb#82
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/chunked.rb#101
  def call(env); end

  # source://rack/3.0.0/lib/rack/chunked.rb#87
  def chunkable_version?(ver); end
end

class Rack::Chunked::Body
  # source://rack/3.0.0/lib/rack/chunked.rb#34
  def initialize(body); end

  # source://rack/3.0.0/lib/rack/chunked.rb#54
  def close; end

  # source://rack/3.0.0/lib/rack/chunked.rb#40
  def each(&block); end

  private

  # source://rack/3.0.0/lib/rack/chunked.rb#61
  def yield_trailers; end
end

# source://rack/3.0.0/lib/rack/chunked.rb#31
Rack::Chunked::Body::TAIL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/chunked.rb#30
Rack::Chunked::Body::TERM = T.let(T.unsafe(nil), String)

class Rack::Chunked::TrailerBody < ::Rack::Chunked::Body
  private

  # source://rack/3.0.0/lib/rack/chunked.rb#75
  def yield_trailers; end
end

class Rack::CommonLogger
  # source://rack/3.0.0/lib/rack/common_logger.rb#29
  def initialize(app, logger = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/common_logger.rb#41
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/common_logger.rb#83
  def extract_content_length(headers); end

  # source://rack/3.0.0/lib/rack/common_logger.rb#52
  def log(env, status, response_headers, began_at); end
end

# source://rack/3.0.0/lib/rack/common_logger.rb#23
Rack::CommonLogger::FORMAT = T.let(T.unsafe(nil), String)

class Rack::ConditionalGet
  # source://rack/3.0.0/lib/rack/conditional_get.rb#22
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/conditional_get.rb#28
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/conditional_get.rb#62
  def etag_matches?(none_match, headers); end

  # source://rack/3.0.0/lib/rack/conditional_get.rb#51
  def fresh?(env, headers); end

  # source://rack/3.0.0/lib/rack/conditional_get.rb#68
  def modified_since?(modified_since, headers); end

  # source://rack/3.0.0/lib/rack/conditional_get.rb#75
  def to_rfc2822(since); end
end

class Rack::Config
  # source://rack/3.0.0/lib/rack/config.rb#12
  def initialize(app, &block); end

  # source://rack/3.0.0/lib/rack/config.rb#17
  def call(env); end
end

class Rack::ContentLength
  include ::Rack::Utils

  # source://rack/3.0.0/lib/rack/content_length.rb#15
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/content_length.rb#19
  def call(env); end
end

class Rack::ContentType
  include ::Rack::Utils

  # source://rack/3.0.0/lib/rack/content_type.rb#18
  def initialize(app, content_type = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/content_type.rb#23
  def call(env); end
end

# source://rack/3.0.0/lib/rack/constants.rb#32
Rack::DELETE = T.let(T.unsafe(nil), String)

class Rack::Deflater
  # source://rack/3.0.0/lib/rack/deflater.rb#39
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/deflater.rb#46
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/deflater.rb#136
  def should_deflate?(env, status, headers, body); end
end

class Rack::Deflater::GzipStream
  # source://rack/3.0.0/lib/rack/deflater.rb#92
  def initialize(body, mtime, sync); end

  # source://rack/3.0.0/lib/rack/deflater.rb#128
  def close; end

  # source://rack/3.0.0/lib/rack/deflater.rb#99
  def each(&block); end

  # source://rack/3.0.0/lib/rack/deflater.rb#123
  def write(data); end
end

# source://rack/3.0.0/lib/rack/deflater.rb#85
Rack::Deflater::GzipStream::BUFFER_LENGTH = T.let(T.unsafe(nil), Integer)

class Rack::Directory
  # source://rack/3.0.0/lib/rack/directory.rb#83
  def initialize(root, app = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/directory.rb#89
  def call(env); end

  # source://rack/3.0.0/lib/rack/directory.rb#109
  def check_bad_request(path_info); end

  # source://rack/3.0.0/lib/rack/directory.rb#119
  def check_forbidden(path_info); end

  # source://rack/3.0.0/lib/rack/directory.rb#181
  def entity_not_found(path_info); end

  # source://rack/3.0.0/lib/rack/directory.rb#197
  def filesize_format(int); end

  # source://rack/3.0.0/lib/rack/directory.rb#96
  def get(env); end

  # source://rack/3.0.0/lib/rack/directory.rb#130
  def list_directory(path_info, path, script_name); end

  # source://rack/3.0.0/lib/rack/directory.rb#171
  def list_path(env, path, path_info, script_name); end

  # source://rack/3.0.0/lib/rack/directory.rb#80
  def root; end

  # source://rack/3.0.0/lib/rack/directory.rb#163
  def stat(path); end
end

# source://rack/3.0.0/lib/rack/directory.rb#20
Rack::Directory::DIR_FILE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/directory.rb#43
Rack::Directory::DIR_PAGE_FOOTER = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/directory.rb#21
Rack::Directory::DIR_PAGE_HEADER = T.let(T.unsafe(nil), String)

class Rack::Directory::DirectoryBody < ::Struct
  # source://rack/3.0.0/lib/rack/directory.rb#53
  def each; end

  private

  # source://rack/3.0.0/lib/rack/directory.rb#73
  def DIR_FILE_escape(htmls); end
end

# source://rack/3.0.0/lib/rack/directory.rb#189
Rack::Directory::FILESIZE_FORMAT = T.let(T.unsafe(nil), Array)

# source://rack/3.0.0/lib/rack/constants.rb#22
Rack::ETAG = T.let(T.unsafe(nil), String)

class Rack::ETag
  # source://rack/3.0.0/lib/rack/etag.rb#22
  def initialize(app, no_cache_control = T.unsafe(nil), cache_control = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/etag.rb#28
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/etag.rb#58
  def digest_body(body); end

  # source://rack/3.0.0/lib/rack/etag.rb#50
  def etag_status?(status); end

  # source://rack/3.0.0/lib/rack/etag.rb#54
  def skip_caching?(headers); end
end

# source://rack/3.0.0/lib/rack/etag.rb#20
Rack::ETag::DEFAULT_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/etag.rb#19
Rack::ETag::ETAG_STRING = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#23
Rack::EXPIRES = T.let(T.unsafe(nil), String)

class Rack::Events
  # source://rack/3.0.0/lib/rack/events.rb#106
  def initialize(app, handlers); end

  # source://rack/3.0.0/lib/rack/events.rb#111
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/events.rb#149
  def make_request(env); end

  # source://rack/3.0.0/lib/rack/events.rb#153
  def make_response(status, headers, body); end

  # source://rack/3.0.0/lib/rack/events.rb#137
  def on_commit(request, response); end

  # source://rack/3.0.0/lib/rack/events.rb#133
  def on_error(request, response, e); end

  # source://rack/3.0.0/lib/rack/events.rb#145
  def on_finish(request, response); end

  # source://rack/3.0.0/lib/rack/events.rb#141
  def on_start(request, response); end
end

module Rack::Events::Abstract
  # source://rack/3.0.0/lib/rack/events.rb#66
  def on_commit(req, res); end

  # source://rack/3.0.0/lib/rack/events.rb#75
  def on_error(req, res, e); end

  # source://rack/3.0.0/lib/rack/events.rb#72
  def on_finish(req, res); end

  # source://rack/3.0.0/lib/rack/events.rb#69
  def on_send(req, res); end

  # source://rack/3.0.0/lib/rack/events.rb#63
  def on_start(req, res); end
end

class Rack::Events::BufferedResponse < ::Rack::Response::Raw
  # source://rack/3.0.0/lib/rack/events.rb#98
  def initialize(status, headers, body); end

  # source://rack/3.0.0/lib/rack/events.rb#96
  def body; end

  # source://rack/3.0.0/lib/rack/events.rb#103
  def to_a; end
end

class Rack::Events::EventedBodyProxy < ::Rack::BodyProxy
  # source://rack/3.0.0/lib/rack/events.rb#82
  def initialize(body, request, response, handlers, &block); end

  # source://rack/3.0.0/lib/rack/events.rb#89
  def each; end

  # source://rack/3.0.0/lib/rack/events.rb#80
  def request; end

  # source://rack/3.0.0/lib/rack/events.rb#80
  def response; end
end

# source://rack/3.0.0/lib/rack/file.rb#8
Rack::File = Rack::Files

class Rack::Files
  # source://rack/3.0.0/lib/rack/files.rb#27
  def initialize(root, headers = T.unsafe(nil), default_mime = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/files.rb#34
  def call(env); end

  # source://rack/3.0.0/lib/rack/files.rb#39
  def get(env); end

  # source://rack/3.0.0/lib/rack/files.rb#25
  def root; end

  # source://rack/3.0.0/lib/rack/files.rb#68
  def serving(request, path); end

  private

  # source://rack/3.0.0/lib/rack/files.rb#190
  def fail(status, body, headers = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/files.rb#209
  def filesize(path); end

  # source://rack/3.0.0/lib/rack/files.rb#205
  def mime_type(path, default_mime); end
end

# source://rack/3.0.0/lib/rack/files.rb#21
Rack::Files::ALLOWED_VERBS = T.let(T.unsafe(nil), Array)

# source://rack/3.0.0/lib/rack/files.rb#22
Rack::Files::ALLOW_HEADER = T.let(T.unsafe(nil), String)

class Rack::Files::BaseIterator
  # source://rack/3.0.0/lib/rack/files.rb#124
  def initialize(path, ranges, options); end

  # source://rack/3.0.0/lib/rack/files.rb#144
  def bytesize; end

  # source://rack/3.0.0/lib/rack/files.rb#153
  def close; end

  # source://rack/3.0.0/lib/rack/files.rb#130
  def each; end

  # source://rack/3.0.0/lib/rack/files.rb#122
  def options; end

  # source://rack/3.0.0/lib/rack/files.rb#122
  def path; end

  # source://rack/3.0.0/lib/rack/files.rb#122
  def ranges; end

  private

  # source://rack/3.0.0/lib/rack/files.rb#171
  def each_range_part(file, range); end

  # source://rack/3.0.0/lib/rack/files.rb#157
  def multipart?; end

  # source://rack/3.0.0/lib/rack/files.rb#161
  def multipart_heading(range); end
end

class Rack::Files::Iterator < ::Rack::Files::BaseIterator
  # source://rack/3.0.0/lib/rack/files.rb#122
  def to_path; end
end

# source://rack/3.0.0/lib/rack/files.rb#23
Rack::Files::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

class Rack::ForwardRequest < ::Exception
  # source://rack/3.0.0/lib/rack/recursive.rb#17
  def initialize(url, env = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/recursive.rb#15
  def env; end

  # source://rack/3.0.0/lib/rack/recursive.rb#15
  def url; end
end

# source://rack/3.0.0/lib/rack/constants.rb#28
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#33
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#7
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#16
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#5
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#6
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

class Rack::Head
  # source://rack/3.0.0/lib/rack/head.rb#10
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/head.rb#14
  def call(env); end
end

class Rack::Headers < ::Hash
  # source://rack/3.0.0/lib/rack/headers.rb#26
  def [](key); end

  # source://rack/3.0.0/lib/rack/headers.rb#30
  def []=(key, value); end

  # source://rack/3.0.0/lib/rack/headers.rb#35
  def assoc(key); end

  # source://rack/3.0.0/lib/rack/headers.rb#39
  def compare_by_identity; end

  # source://rack/3.0.0/lib/rack/headers.rb#43
  def delete(key); end

  # source://rack/3.0.0/lib/rack/headers.rb#47
  def dig(key, *a); end

  # source://rack/3.0.0/lib/rack/headers.rb#143
  def except(*a); end

  # source://rack/3.0.0/lib/rack/headers.rb#51
  def fetch(key, *default, &block); end

  # source://rack/3.0.0/lib/rack/headers.rb#56
  def fetch_values(*a); end

  # source://rack/3.0.0/lib/rack/headers.rb#60
  def has_key?(key); end

  # source://rack/3.0.0/lib/rack/headers.rb#60
  def include?(key); end

  # source://rack/3.0.0/lib/rack/headers.rb#67
  def invert; end

  # source://rack/3.0.0/lib/rack/headers.rb#60
  def key?(key); end

  # source://rack/3.0.0/lib/rack/headers.rb#60
  def member?(key); end

  # source://rack/3.0.0/lib/rack/headers.rb#73
  def merge(hash, &block); end

  # source://rack/3.0.0/lib/rack/headers.rb#102
  def merge!(hash, &block); end

  # source://rack/3.0.0/lib/rack/headers.rb#77
  def reject(&block); end

  # source://rack/3.0.0/lib/rack/headers.rb#83
  def replace(hash); end

  # source://rack/3.0.0/lib/rack/headers.rb#88
  def select(&block); end

  # source://rack/3.0.0/lib/rack/headers.rb#121
  def slice(*a); end

  # source://rack/3.0.0/lib/rack/headers.rb#30
  def store(key, value); end

  # source://rack/3.0.0/lib/rack/headers.rb#94
  def to_proc; end

  # source://rack/3.0.0/lib/rack/headers.rb#127
  def transform_keys(&block); end

  # source://rack/3.0.0/lib/rack/headers.rb#131
  def transform_keys!; end

  # source://rack/3.0.0/lib/rack/headers.rb#98
  def transform_values(&block); end

  # source://rack/3.0.0/lib/rack/headers.rb#102
  def update(hash, &block); end

  # source://rack/3.0.0/lib/rack/headers.rb#114
  def values_at(*keys); end

  private

  # source://rack/3.0.0/lib/rack/headers.rb#150
  def downcase_key(key); end

  class << self
    # source://rack/3.0.0/lib/rack/headers.rb#7
    def [](*items); end
  end
end

# source://rack/3.0.0/lib/rack/constants.rb#35
Rack::LINK = T.let(T.unsafe(nil), String)

class Rack::Lint
  # source://rack/3.0.0/lib/rack/lint.rb#13
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/lint.rb#34
  def call(env = T.unsafe(nil)); end
end

class Rack::Lint::LintError < ::RuntimeError; end

class Rack::Lint::Wrapper
  # source://rack/3.0.0/lib/rack/lint.rb#39
  def initialize(app, env); end

  # source://rack/3.0.0/lib/rack/lint.rb#849
  def call(stream); end

  # source://rack/3.0.0/lib/rack/lint.rb#693
  def check_content_length(status, headers); end

  # source://rack/3.0.0/lib/rack/lint.rb#677
  def check_content_type(status, headers); end

  # source://rack/3.0.0/lib/rack/lint.rb#97
  def check_environment(env); end

  # source://rack/3.0.0/lib/rack/lint.rb#491
  def check_error(error); end

  # source://rack/3.0.0/lib/rack/lint.rb#667
  def check_header_value(key, value); end

  # source://rack/3.0.0/lib/rack/lint.rb#627
  def check_headers(headers); end

  # source://rack/3.0.0/lib/rack/lint.rb#551
  def check_hijack(env); end

  # source://rack/3.0.0/lib/rack/lint.rb#579
  def check_hijack_response(headers, env); end

  # source://rack/3.0.0/lib/rack/lint.rb#387
  def check_input(input); end

  # source://rack/3.0.0/lib/rack/lint.rb#616
  def check_status(status); end

  # source://rack/3.0.0/lib/rack/lint.rb#744
  def close; end

  # source://rack/3.0.0/lib/rack/lint.rb#778
  def each; end

  # source://rack/3.0.0/lib/rack/lint.rb#820
  def respond_to?(name, *_arg1); end

  # source://rack/3.0.0/lib/rack/lint.rb#54
  def response; end

  # source://rack/3.0.0/lib/rack/lint.rb#836
  def to_ary; end

  # source://rack/3.0.0/lib/rack/lint.rb#706
  def verify_content_length(size); end

  # source://rack/3.0.0/lib/rack/lint.rb#760
  def verify_to_path; end
end

class Rack::Lint::Wrapper::ErrorWrapper
  # source://rack/3.0.0/lib/rack/lint.rb#501
  def initialize(error); end

  # source://rack/3.0.0/lib/rack/lint.rb#523
  def close(*args); end

  # source://rack/3.0.0/lib/rack/lint.rb#518
  def flush; end

  # source://rack/3.0.0/lib/rack/lint.rb#506
  def puts(str); end

  # source://rack/3.0.0/lib/rack/lint.rb#511
  def write(str); end
end

class Rack::Lint::Wrapper::InputWrapper
  # source://rack/3.0.0/lib/rack/lint.rb#406
  def initialize(input); end

  # source://rack/3.0.0/lib/rack/lint.rb#483
  def close(*args); end

  # source://rack/3.0.0/lib/rack/lint.rb#471
  def each(*args); end

  # source://rack/3.0.0/lib/rack/lint.rb#412
  def gets(*args); end

  # source://rack/3.0.0/lib/rack/lint.rb#438
  def read(*args); end
end

class Rack::Lint::Wrapper::StreamWrapper
  extend ::Forwardable

  # source://rack/3.0.0/lib/rack/lint.rb#884
  def initialize(stream); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def <<(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def close(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def close_read(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def close_write(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def closed?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def flush(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def read(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def write(*args, **_arg1, &block); end
end

# source://rack/3.0.0/lib/rack/lint.rb#877
Rack::Lint::Wrapper::StreamWrapper::REQUIRED_METHODS = T.let(T.unsafe(nil), Array)

class Rack::Lock
  # source://rack/3.0.0/lib/rack/lock.rb#9
  def initialize(app, mutex = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/lock.rb#13
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/lock.rb#25
  def unlock; end
end

class Rack::Logger
  # source://rack/3.0.0/lib/rack/logger.rb#10
  def initialize(app, level = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/logger.rb#14
  def call(env); end
end

class Rack::MediaType
  class << self
    # source://rack/3.0.0/lib/rack/media_type.rb#26
    def params(content_type); end

    # source://rack/3.0.0/lib/rack/media_type.rb#16
    def type(content_type); end

    private

    # source://rack/3.0.0/lib/rack/media_type.rb#38
    def strip_doublequotes(str); end
  end
end

# source://rack/3.0.0/lib/rack/media_type.rb#7
Rack::MediaType::SPLIT_PATTERN = T.let(T.unsafe(nil), Regexp)

class Rack::MethodOverride
  # source://rack/3.0.0/lib/rack/method_override.rb#15
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/method_override.rb#19
  def call(env); end

  # source://rack/3.0.0/lib/rack/method_override.rb#31
  def method_override(env); end

  private

  # source://rack/3.0.0/lib/rack/method_override.rb#44
  def allowed_methods; end

  # source://rack/3.0.0/lib/rack/method_override.rb#48
  def method_override_param(req); end
end

# source://rack/3.0.0/lib/rack/method_override.rb#13
Rack::MethodOverride::ALLOWED_METHODS = T.let(T.unsafe(nil), Array)

# source://rack/3.0.0/lib/rack/method_override.rb#9
Rack::MethodOverride::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://rack/3.0.0/lib/rack/method_override.rb#12
Rack::MethodOverride::HTTP_METHOD_OVERRIDE_HEADER = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/method_override.rb#11
Rack::MethodOverride::METHOD_OVERRIDE_PARAM_KEY = T.let(T.unsafe(nil), String)

module Rack::Mime
  private

  # source://rack/3.0.0/lib/rack/mime.rb#30
  def match?(value, matcher); end

  # source://rack/3.0.0/lib/rack/mime.rb#18
  def mime_type(ext, fallback = T.unsafe(nil)); end

  class << self
    # source://rack/3.0.0/lib/rack/mime.rb#30
    def match?(value, matcher); end

    # source://rack/3.0.0/lib/rack/mime.rb#18
    def mime_type(ext, fallback = T.unsafe(nil)); end
  end
end

# source://rack/3.0.0/lib/rack/mime.rb#51
Rack::Mime::MIME_TYPES = T.let(T.unsafe(nil), Hash)

class Rack::MockRequest
  # source://rack/3.0.0/lib/rack/mock_request.rb#49
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#62
  def delete(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#54
  def get(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#64
  def head(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#66
  def options(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#60
  def patch(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#56
  def post(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#58
  def put(uri, opts = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#71
  def request(method = T.unsafe(nil), uri = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # source://rack/3.0.0/lib/rack/mock_request.rb#103
    def env_for(uri = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/mock_request.rb#89
    def parse_uri_rfc2396(uri); end
  end
end

# source://rack/3.0.0/lib/rack/mock_request.rb#44
Rack::MockRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

class Rack::MockRequest::FatalWarner
  # source://rack/3.0.0/lib/rack/mock_request.rb#36
  def flush; end

  # source://rack/3.0.0/lib/rack/mock_request.rb#28
  def puts(warning); end

  # source://rack/3.0.0/lib/rack/mock_request.rb#39
  def string; end

  # source://rack/3.0.0/lib/rack/mock_request.rb#32
  def write(warning); end
end

class Rack::MockRequest::FatalWarning < ::RuntimeError; end

class Rack::MockResponse < ::Rack::Response
  # source://rack/3.0.0/lib/rack/mock_response.rb#24
  def initialize(status, headers, body, errors = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/mock_response.rb#39
  def =~(other); end

  # source://rack/3.0.0/lib/rack/mock_response.rb#47
  def body; end

  # source://rack/3.0.0/lib/rack/mock_response.rb#73
  def cookie(name); end

  # source://rack/3.0.0/lib/rack/mock_response.rb#19
  def cookies; end

  # source://rack/3.0.0/lib/rack/mock_response.rb#69
  def empty?; end

  # source://rack/3.0.0/lib/rack/mock_response.rb#22
  def errors; end

  # source://rack/3.0.0/lib/rack/mock_response.rb#22
  def errors=(_arg0); end

  # source://rack/3.0.0/lib/rack/mock_response.rb#43
  def match(other); end

  # source://rack/3.0.0/lib/rack/mock_response.rb#19
  def original_headers; end

  private

  # source://rack/3.0.0/lib/rack/mock_response.rb#102
  def identify_cookie_attributes(cookie_filling); end

  # source://rack/3.0.0/lib/rack/mock_response.rb#79
  def parse_cookies_from_header; end

  class << self
    def [](*_arg0); end
  end
end

# For backwards compatibility with 1.1.0 and below
#
# source://rack-test//lib/rack/test.rb#413
Rack::MockSession = Rack::Test::Session

module Rack::Multipart
  class << self
    # source://rack/3.0.0/lib/rack/multipart.rb#39
    def build_multipart(params, first = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/multipart.rb#35
    def extract_multipart(request, params = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/multipart.rb#17
    def parse_multipart(env, params = T.unsafe(nil)); end
  end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#30
Rack::Multipart::ATTRIBUTE = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#29
Rack::Multipart::ATTRIBUTE_CHAR = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#24
Rack::Multipart::BROKEN = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#22
Rack::Multipart::CONDISP = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#41
Rack::Multipart::DISPPARM = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#19
Rack::Multipart::EOL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#37
Rack::Multipart::EXTENDED_INITIAL_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#39
Rack::Multipart::EXTENDED_INITIAL_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#38
Rack::Multipart::EXTENDED_INITIAL_VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#34
Rack::Multipart::EXTENDED_OTHER_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#36
Rack::Multipart::EXTENDED_OTHER_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#35
Rack::Multipart::EXTENDED_OTHER_VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#40
Rack::Multipart::EXTENDED_PARAMETER = T.let(T.unsafe(nil), Regexp)

class Rack::Multipart::EmptyContentError < ::EOFError; end
class Rack::Multipart::Error < ::StandardError; end

class Rack::Multipart::Generator
  # source://rack/3.0.0/lib/rack/multipart/generator.rb#8
  def initialize(params, first = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/multipart/generator.rb#16
  def dump; end

  private

  # source://rack/3.0.0/lib/rack/multipart/generator.rb#89
  def content_for_other(file, name); end

  # source://rack/3.0.0/lib/rack/multipart/generator.rb#77
  def content_for_tempfile(io, file, name); end

  # source://rack/3.0.0/lib/rack/multipart/generator.rb#52
  def flattened_params; end

  # source://rack/3.0.0/lib/rack/multipart/generator.rb#37
  def multipart?; end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#20
Rack::Multipart::MULTIPART = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart.rb#14
Rack::Multipart::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#26
Rack::Multipart::MULTIPART_CONTENT_DISPOSITION = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#27
Rack::Multipart::MULTIPART_CONTENT_ID = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#25
Rack::Multipart::MULTIPART_CONTENT_TYPE = T.let(T.unsafe(nil), Regexp)

class Rack::Multipart::MultipartPartLimitError < ::Errno::EMFILE; end

class Rack::Multipart::Parser
  # source://rack/3.0.0/lib/rack/multipart/parser.rb#193
  def initialize(boundary, tempfile, bufsize, query_parser); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#208
  def parse(io); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#231
  def result; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#191
  def state; end

  private

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#334
  def consume_boundary; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#243
  def dequote(str); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#343
  def get_filename(head); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#278
  def handle_consume_token; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#415
  def handle_empty_content!(content); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#262
  def handle_fast_forward; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#311
  def handle_mime_body; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#288
  def handle_mime_head; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#249
  def read_data(io, outbuf); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#381
  def tag_multipart_encoding(filename, content_type, name, body); end

  class << self
    # source://rack/3.0.0/lib/rack/multipart/parser.rb#90
    def parse(io, content_length, content_type, tmpfile, bufsize, qp); end

    # source://rack/3.0.0/lib/rack/multipart/parser.rb#83
    def parse_boundary(content_type); end
  end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#45
Rack::Multipart::Parser::BUFSIZE = T.let(T.unsafe(nil), Integer)

class Rack::Multipart::Parser::BoundedIO
  # source://rack/3.0.0/lib/rack/multipart/parser.rb#52
  def initialize(io, content_length); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#58
  def read(size, outbuf = T.unsafe(nil)); end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#378
Rack::Multipart::Parser::CHARSET = T.let(T.unsafe(nil), String)

class Rack::Multipart::Parser::Collector
  include ::Enumerable

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#146
  def initialize(tempfile); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#152
  def each; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#172
  def on_mime_body(mime_index, content); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#176
  def on_mime_finish(mime_index); end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#156
  def on_mime_head(mime_index, head, filename, content_type, name); end

  private

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#181
  def check_open_files; end
end

class Rack::Multipart::Parser::Collector::BufferPart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack/3.0.0/lib/rack/multipart/parser.rb#136
  def close; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#135
  def file?; end
end

class Rack::Multipart::Parser::Collector::MimePart < ::Struct
  # source://rack/3.0.0/lib/rack/multipart/parser.rb#112
  def get_data; end
end

class Rack::Multipart::Parser::Collector::TempfilePart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack/3.0.0/lib/rack/multipart/parser.rb#141
  def close; end

  # source://rack/3.0.0/lib/rack/multipart/parser.rb#140
  def file?; end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#81
Rack::Multipart::Parser::EMPTY = T.let(T.unsafe(nil), Rack::Multipart::Parser::MultipartInfo)

class Rack::Multipart::Parser::MultipartInfo < ::Struct
  def params; end
  def params=(_); end
  def tmp_files; end
  def tmp_files=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#47
Rack::Multipart::Parser::TEMPFILE_FACTORY = T.let(T.unsafe(nil), Proc)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#46
Rack::Multipart::Parser::TEXT_PLAIN = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#33
Rack::Multipart::REGULAR_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#32
Rack::Multipart::REGULAR_PARAMETER_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#42
Rack::Multipart::RFC2183 = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#31
Rack::Multipart::SECTION = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/multipart/parser.rb#21
Rack::Multipart::TOKEN = T.let(T.unsafe(nil), Regexp)

class Rack::Multipart::UploadedFile
  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#16
  def initialize(filepath = T.unsafe(nil), ct = T.unsafe(nil), bin = T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#14
  def content_type; end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#14
  def content_type=(_arg0); end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#31
  def local_path; end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#40
  def method_missing(method_name, *args, &block); end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#11
  def original_filename; end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#31
  def path; end

  # source://rack/3.0.0/lib/rack/multipart/uploaded_file.rb#36
  def respond_to?(*args); end
end

# source://rack/3.0.0/lib/rack/multipart/parser.rb#23
Rack::Multipart::VALUE = T.let(T.unsafe(nil), Regexp)

class Rack::NullLogger
  # source://rack/3.0.0/lib/rack/null_logger.rb#7
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#45
  def <<(msg); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#43
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#11
  def call(env); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#42
  def close; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#34
  def datetime_format; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#39
  def datetime_format=(datetime_format); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#17
  def debug(progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#27
  def debug!; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#23
  def debug?; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#19
  def error(progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#28
  def error!; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#25
  def error?; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#20
  def fatal(progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#29
  def fatal!; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#26
  def fatal?; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#35
  def formatter; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#40
  def formatter=(formatter); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#16
  def info(progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#30
  def info!; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#22
  def info?; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#32
  def level; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#37
  def level=(level); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#44
  def log(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#33
  def progname; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#38
  def progname=(progname); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#46
  def reopen(logdev = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#36
  def sev_threshold; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#41
  def sev_threshold=(sev_threshold); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#21
  def unknown(progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#18
  def warn(progname = T.unsafe(nil), &block); end

  # source://rack/3.0.0/lib/rack/null_logger.rb#31
  def warn!; end

  # source://rack/3.0.0/lib/rack/null_logger.rb#24
  def warn?; end
end

# source://rack/3.0.0/lib/rack/constants.rb#34
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#31
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#8
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#29
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#30
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#12
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

class Rack::QueryParser
  # source://rack/3.0.0/lib/rack/query_parser.rb#31
  def initialize(params_class, _key_space_limit = T.unsafe(nil), param_depth_limit); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#167
  def make_params; end

  # source://rack/3.0.0/lib/rack/query_parser.rb#171
  def new_depth_limit(param_depth_limit); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#93
  def normalize_params(params, name, v, _depth = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#29
  def param_depth_limit; end

  # source://rack/3.0.0/lib/rack/query_parser.rb#72
  def parse_nested_query(qs, separator = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#44
  def parse_query(qs, separator = T.unsafe(nil), &unescaper); end

  private

  # source://rack/3.0.0/lib/rack/query_parser.rb#97
  def _normalize_params(params, name, v, depth); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#181
  def params_hash_has_key?(hash, key); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#177
  def params_hash_type?(obj); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#193
  def unescape(s); end

  class << self
    # source://rack/3.0.0/lib/rack/query_parser.rb#21
    def make_default(_key_space_limit = T.unsafe(nil), param_depth_limit); end
  end
end

# source://rack/3.0.0/lib/rack/query_parser.rb#6
Rack::QueryParser::COMMON_SEP = T.let(T.unsafe(nil), Hash)

# source://rack/3.0.0/lib/rack/query_parser.rb#5
Rack::QueryParser::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

class Rack::QueryParser::InvalidParameterError < ::ArgumentError; end
class Rack::QueryParser::ParameterTypeError < ::TypeError; end

class Rack::QueryParser::Params
  # source://rack/3.0.0/lib/rack/query_parser.rb#198
  def initialize; end

  # source://rack/3.0.0/lib/rack/query_parser.rb#203
  def [](key); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#207
  def []=(key, value); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#211
  def key?(key); end

  # source://rack/3.0.0/lib/rack/query_parser.rb#233
  def to_h; end

  # source://rack/3.0.0/lib/rack/query_parser.rb#233
  def to_params_hash; end
end

class Rack::QueryParser::ParamsTooDeepError < ::RangeError; end

# source://rack/3.0.0/lib/rack/constants.rb#42
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#49
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#44
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#50
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#43
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#62
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#52
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#53
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#51
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#58
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#59
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#56
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#55
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#57
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#60
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#61
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#54
Rack::RACK_RESPONSE_FINISHED = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#45
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#46
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#47
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#41
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#48
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#40
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/version.rb#28
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#9
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#10
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

class Rack::Recursive
  # source://rack/3.0.0/lib/rack/recursive.rb#37
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/recursive.rb#45
  def _call(env); end

  # source://rack/3.0.0/lib/rack/recursive.rb#41
  def call(env); end

  # source://rack/3.0.0/lib/rack/recursive.rb#52
  def include(env, path); end
end

class Rack::Reloader
  # source://rack/3.0.0/lib/rack/reloader.rb#25
  def initialize(app, cooldown = T.unsafe(nil), backend = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/reloader.rb#36
  def call(env); end

  # source://rack/3.0.0/lib/rack/reloader.rb#50
  def reload!(stderr = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/reloader.rb#58
  def safe_load(file, mtime, stderr = T.unsafe(nil)); end
end

module Rack::Reloader::Stat
  # source://rack/3.0.0/lib/rack/reloader.rb#88
  def figure_path(file, paths); end

  # source://rack/3.0.0/lib/rack/reloader.rb#69
  def rotation; end

  # source://rack/3.0.0/lib/rack/reloader.rb#103
  def safe_stat(file); end
end

class Rack::Request
  include ::Rack::Request::Env
  include ::Rack::Request::Helpers

  # source://rack/3.0.0/lib/rack/request.rb#62
  def initialize(env); end

  # source://rack/3.0.0/lib/rack/request.rb#76
  def delete_param(k); end

  # source://rack/3.0.0/lib/rack/request.rb#67
  def params; end

  # source://rack/3.0.0/lib/rack/request.rb#67
  def query; end

  # source://rack/3.0.0/lib/rack/request.rb#71
  def update_param(k, v); end

  # source://yard/0.9.28/lib/yard/server/rack_adapter.rb#86
  def version_supplied; end

  # source://yard/0.9.28/lib/yard/server/rack_adapter.rb#86
  def version_supplied=(_arg0); end

  # source://yard/0.9.28/lib/yard/server/rack_adapter.rb#88
  def xhr?; end

  class << self
    # source://rack/3.0.0/lib/rack/request.rb#31
    def forwarded_priority; end

    # source://rack/3.0.0/lib/rack/request.rb#31
    def forwarded_priority=(_arg0); end

    # source://rack/3.0.0/lib/rack/request.rb#18
    def ip_filter; end

    # source://rack/3.0.0/lib/rack/request.rb#18
    def ip_filter=(_arg0); end

    # source://rack/3.0.0/lib/rack/request.rb#40
    def x_forwarded_proto_priority; end

    # source://rack/3.0.0/lib/rack/request.rb#40
    def x_forwarded_proto_priority=(_arg0); end
  end
end

# source://rack/3.0.0/lib/rack/request.rb#60
Rack::Request::ALLOWED_SCHEMES = T.let(T.unsafe(nil), Array)

module Rack::Request::Env
  # source://rack/3.0.0/lib/rack/request.rb#86
  def initialize(env); end

  # source://rack/3.0.0/lib/rack/request.rb#129
  def add_header(key, v); end

  # source://rack/3.0.0/lib/rack/request.rb#140
  def delete_header(name); end

  # source://rack/3.0.0/lib/rack/request.rb#111
  def each_header(&block); end

  # source://rack/3.0.0/lib/rack/request.rb#84
  def env; end

  # source://rack/3.0.0/lib/rack/request.rb#106
  def fetch_header(name, &block); end

  # source://rack/3.0.0/lib/rack/request.rb#100
  def get_header(name); end

  # source://rack/3.0.0/lib/rack/request.rb#95
  def has_header?(name); end

  # source://rack/3.0.0/lib/rack/request.rb#116
  def set_header(name, v); end

  private

  # source://rack/3.0.0/lib/rack/request.rb#144
  def initialize_copy(other); end
end

module Rack::Request::Helpers
  # source://rack/3.0.0/lib/rack/request.rb#484
  def GET; end

  # source://rack/3.0.0/lib/rack/request.rb#498
  def POST; end

  # source://rack/3.0.0/lib/rack/request.rb#589
  def [](key); end

  # source://rack/3.0.0/lib/rack/request.rb#598
  def []=(key, value); end

  # source://rack/3.0.0/lib/rack/request.rb#576
  def accept_encoding; end

  # source://rack/3.0.0/lib/rack/request.rb#580
  def accept_language; end

  # source://rack/3.0.0/lib/rack/request.rb#266
  def authority; end

  # source://rack/3.0.0/lib/rack/request.rb#559
  def base_url; end

  # source://rack/3.0.0/lib/rack/request.rb#190
  def body; end

  # source://rack/3.0.0/lib/rack/request.rb#458
  def content_charset; end

  # source://rack/3.0.0/lib/rack/request.rb#199
  def content_length; end

  # source://rack/3.0.0/lib/rack/request.rb#308
  def content_type; end

  # source://rack/3.0.0/lib/rack/request.rb#293
  def cookies; end

  # source://rack/3.0.0/lib/rack/request.rb#220
  def delete?; end

  # source://rack/3.0.0/lib/rack/request.rb#554
  def delete_param(k); end

  # source://rack/3.0.0/lib/rack/request.rb#470
  def form_data?; end

  # source://rack/3.0.0/lib/rack/request.rb#393
  def forwarded_authority; end

  # source://rack/3.0.0/lib/rack/request.rb#353
  def forwarded_for; end

  # source://rack/3.0.0/lib/rack/request.rb#374
  def forwarded_port; end

  # source://rack/3.0.0/lib/rack/request.rb#572
  def fullpath; end

  # source://rack/3.0.0/lib/rack/request.rb#223
  def get?; end

  # source://rack/3.0.0/lib/rack/request.rb#226
  def head?; end

  # source://rack/3.0.0/lib/rack/request.rb#333
  def host; end

  # source://rack/3.0.0/lib/rack/request.rb#318
  def host_authority; end

  # source://rack/3.0.0/lib/rack/request.rb#322
  def host_with_port(authority = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/request.rb#341
  def hostname; end

  # source://rack/3.0.0/lib/rack/request.rb#414
  def ip; end

  # source://rack/3.0.0/lib/rack/request.rb#232
  def link?; end

  # source://rack/3.0.0/lib/rack/request.rb#200
  def logger; end

  # source://rack/3.0.0/lib/rack/request.rb#441
  def media_type; end

  # source://rack/3.0.0/lib/rack/request.rb#450
  def media_type_params; end

  # source://rack/3.0.0/lib/rack/request.rb#229
  def options?; end

  # source://rack/3.0.0/lib/rack/request.rb#525
  def params; end

  # source://rack/3.0.0/lib/rack/request.rb#479
  def parseable_data?; end

  # source://rack/3.0.0/lib/rack/request.rb#235
  def patch?; end

  # source://rack/3.0.0/lib/rack/request.rb#568
  def path; end

  # source://rack/3.0.0/lib/rack/request.rb#194
  def path_info; end

  # source://rack/3.0.0/lib/rack/request.rb#195
  def path_info=(s); end

  # source://rack/3.0.0/lib/rack/request.rb#345
  def port; end

  # source://rack/3.0.0/lib/rack/request.rb#238
  def post?; end

  # source://rack/3.0.0/lib/rack/request.rb#241
  def put?; end

  # source://rack/3.0.0/lib/rack/request.rb#198
  def query_string; end

  # source://rack/3.0.0/lib/rack/request.rb#204
  def referer; end

  # source://rack/3.0.0/lib/rack/request.rb#204
  def referrer; end

  # source://rack/3.0.0/lib/rack/request.rb#197
  def request_method; end

  # source://rack/3.0.0/lib/rack/request.rb#249
  def scheme; end

  # source://rack/3.0.0/lib/rack/request.rb#191
  def script_name; end

  # source://rack/3.0.0/lib/rack/request.rb#192
  def script_name=(s); end

  # source://rack/3.0.0/lib/rack/request.rb#272
  def server_authority; end

  # source://rack/3.0.0/lib/rack/request.rb#285
  def server_name; end

  # source://rack/3.0.0/lib/rack/request.rb#289
  def server_port; end

  # source://rack/3.0.0/lib/rack/request.rb#207
  def session; end

  # source://rack/3.0.0/lib/rack/request.rb#213
  def session_options; end

  # source://rack/3.0.0/lib/rack/request.rb#410
  def ssl?; end

  # source://rack/3.0.0/lib/rack/request.rb#244
  def trace?; end

  # source://rack/3.0.0/lib/rack/request.rb#584
  def trusted_proxy?(ip); end

  # source://rack/3.0.0/lib/rack/request.rb#247
  def unlink?; end

  # source://rack/3.0.0/lib/rack/request.rb#534
  def update_param(k, v); end

  # source://rack/3.0.0/lib/rack/request.rb#564
  def url; end

  # source://rack/3.0.0/lib/rack/request.rb#201
  def user_agent; end

  # source://rack/3.0.0/lib/rack/request.rb#605
  def values_at(*keys); end

  # source://rack/3.0.0/lib/rack/request.rb#313
  def xhr?; end

  private

  # source://rack/3.0.0/lib/rack/request.rb#737
  def allowed_scheme(header); end

  # source://rack/3.0.0/lib/rack/request.rb#611
  def default_session; end

  # source://rack/3.0.0/lib/rack/request.rb#741
  def forwarded_priority; end

  # source://rack/3.0.0/lib/rack/request.rb#713
  def forwarded_scheme; end

  # source://rack/3.0.0/lib/rack/request.rb#639
  def get_http_forwarded(token); end

  # source://rack/3.0.0/lib/rack/request.rb#627
  def parse_http_accept_header(header); end

  # source://rack/3.0.0/lib/rack/request.rb#651
  def parse_multipart; end

  # source://rack/3.0.0/lib/rack/request.rb#647
  def parse_query(qs, d = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/request.rb#643
  def query_parser; end

  # source://rack/3.0.0/lib/rack/request.rb#704
  def reject_trusted_ip_addresses(ip_addresses); end

  # source://rack/3.0.0/lib/rack/request.rb#698
  def split_authority(authority); end

  # source://rack/3.0.0/lib/rack/request.rb#655
  def split_header(value); end

  # source://rack/3.0.0/lib/rack/request.rb#614
  def wrap_ipv6(host); end

  # source://rack/3.0.0/lib/rack/request.rb#745
  def x_forwarded_proto_priority; end
end

# source://rack/3.0.0/lib/rack/request.rb#168
Rack::Request::Helpers::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

# source://rack/3.0.0/lib/rack/request.rb#153
Rack::Request::Helpers::FORM_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack/3.0.0/lib/rack/request.rb#176
Rack::Request::Helpers::HTTP_FORWARDED = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#171
Rack::Request::Helpers::HTTP_X_FORWARDED_FOR = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#174
Rack::Request::Helpers::HTTP_X_FORWARDED_HOST = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#185
Rack::Request::Helpers::HTTP_X_FORWARDED_PORT = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#182
Rack::Request::Helpers::HTTP_X_FORWARDED_PROTO = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#179
Rack::Request::Helpers::HTTP_X_FORWARDED_SCHEME = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#188
Rack::Request::Helpers::HTTP_X_FORWARDED_SSL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/request.rb#161
Rack::Request::Helpers::PARSEABLE_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

class Rack::Response
  include ::Rack::Response::Helpers

  # source://rack/3.0.0/lib/rack/response.rb#61
  def initialize(body = T.unsafe(nil), status = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/response.rb#158
  def [](key); end

  # source://rack/3.0.0/lib/rack/response.rb#162
  def []=(key, value); end

  # source://rack/3.0.0/lib/rack/response.rb#31
  def body; end

  # source://rack/3.0.0/lib/rack/response.rb#31
  def body=(_arg0); end

  # source://rack/3.0.0/lib/rack/response.rb#101
  def chunked?; end

  # source://rack/3.0.0/lib/rack/response.rb#146
  def close; end

  # source://rack/3.0.0/lib/rack/response.rb#166
  def delete_header(key); end

  # source://rack/3.0.0/lib/rack/response.rb#126
  def each(&callback); end

  # source://rack/3.0.0/lib/rack/response.rb#150
  def empty?; end

  # source://rack/3.0.0/lib/rack/response.rb#108
  def finish(&block); end

  # source://rack/3.0.0/lib/rack/response.rb#158
  def get_header(key); end

  # source://rack/3.0.0/lib/rack/response.rb#154
  def has_header?(key); end

  # source://rack/3.0.0/lib/rack/response.rb#35
  def header; end

  # source://rack/3.0.0/lib/rack/response.rb#32
  def headers; end

  # source://rack/3.0.0/lib/rack/response.rb#31
  def length; end

  # source://rack/3.0.0/lib/rack/response.rb#31
  def length=(_arg0); end

  # source://rack/3.0.0/lib/rack/response.rb#96
  def redirect(target, status = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/response.rb#162
  def set_header(key, value); end

  # source://rack/3.0.0/lib/rack/response.rb#31
  def status; end

  # source://rack/3.0.0/lib/rack/response.rb#31
  def status=(_arg0); end

  # source://rack/3.0.0/lib/rack/response.rb#108
  def to_a(&block); end

  # source://rack/3.0.0/lib/rack/response.rb#140
  def write(chunk); end

  class << self
    # source://rack/3.0.0/lib/rack/response.rb#24
    def [](status, headers, body); end
  end
end

# source://rack/3.0.0/lib/rack/response.rb#28
Rack::Response::CHUNKED = T.let(T.unsafe(nil), String)

module Rack::Response::Helpers
  # source://rack/3.0.0/lib/rack/response.rb#185
  def accepted?; end

  # source://rack/3.0.0/lib/rack/response.rb#213
  def add_header(key, value); end

  # source://rack/3.0.0/lib/rack/response.rb#188
  def bad_request?; end

  # source://rack/3.0.0/lib/rack/response.rb#301
  def cache!(duration = T.unsafe(nil), directive: T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/response.rb#284
  def cache_control; end

  # source://rack/3.0.0/lib/rack/response.rb#288
  def cache_control=(value); end

  # source://rack/3.0.0/lib/rack/response.rb#180
  def client_error?; end

  # source://rack/3.0.0/lib/rack/response.rb#251
  def content_length; end

  # source://rack/3.0.0/lib/rack/response.rb#234
  def content_type; end

  # source://rack/3.0.0/lib/rack/response.rb#239
  def content_type=(content_type); end

  # source://rack/3.0.0/lib/rack/response.rb#184
  def created?; end

  # source://rack/3.0.0/lib/rack/response.rb#268
  def delete_cookie(key, value = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/response.rb#293
  def do_not_cache!; end

  # source://rack/3.0.0/lib/rack/response.rb#308
  def etag; end

  # source://rack/3.0.0/lib/rack/response.rb#312
  def etag=(value); end

  # source://rack/3.0.0/lib/rack/response.rb#190
  def forbidden?; end

  # source://rack/3.0.0/lib/rack/response.rb#200
  def include?(header); end

  # source://rack/3.0.0/lib/rack/response.rb#177
  def informational?; end

  # source://rack/3.0.0/lib/rack/response.rb#175
  def invalid?; end

  # source://rack/3.0.0/lib/rack/response.rb#256
  def location; end

  # source://rack/3.0.0/lib/rack/response.rb#260
  def location=(location); end

  # source://rack/3.0.0/lib/rack/response.rb#243
  def media_type; end

  # source://rack/3.0.0/lib/rack/response.rb#247
  def media_type_params; end

  # source://rack/3.0.0/lib/rack/response.rb#192
  def method_not_allowed?; end

  # source://rack/3.0.0/lib/rack/response.rb#187
  def moved_permanently?; end

  # source://rack/3.0.0/lib/rack/response.rb#186
  def no_content?; end

  # source://rack/3.0.0/lib/rack/response.rb#193
  def not_acceptable?; end

  # source://rack/3.0.0/lib/rack/response.rb#191
  def not_found?; end

  # source://rack/3.0.0/lib/rack/response.rb#183
  def ok?; end

  # source://rack/3.0.0/lib/rack/response.rb#195
  def precondition_failed?; end

  # source://rack/3.0.0/lib/rack/response.rb#198
  def redirect?; end

  # source://rack/3.0.0/lib/rack/response.rb#179
  def redirection?; end

  # source://rack/3.0.0/lib/rack/response.rb#194
  def request_timeout?; end

  # source://rack/3.0.0/lib/rack/response.rb#181
  def server_error?; end

  # source://rack/3.0.0/lib/rack/response.rb#264
  def set_cookie(key, value); end

  # source://rack/3.0.0/lib/rack/response.rb#276
  def set_cookie_header; end

  # source://rack/3.0.0/lib/rack/response.rb#280
  def set_cookie_header=(value); end

  # source://rack/3.0.0/lib/rack/response.rb#178
  def successful?; end

  # source://rack/3.0.0/lib/rack/response.rb#189
  def unauthorized?; end

  # source://rack/3.0.0/lib/rack/response.rb#196
  def unprocessable?; end

  protected

  # source://rack/3.0.0/lib/rack/response.rb#346
  def append(chunk); end

  # source://rack/3.0.0/lib/rack/response.rb#318
  def buffered_body!; end
end

class Rack::Response::Raw
  include ::Rack::Response::Helpers

  # source://rack/3.0.0/lib/rack/response.rb#366
  def initialize(status, headers); end

  # source://rack/3.0.0/lib/rack/response.rb#383
  def delete_header(key); end

  # source://rack/3.0.0/lib/rack/response.rb#375
  def get_header(key); end

  # source://rack/3.0.0/lib/rack/response.rb#371
  def has_header?(key); end

  # source://rack/3.0.0/lib/rack/response.rb#363
  def headers; end

  # source://rack/3.0.0/lib/rack/response.rb#379
  def set_header(key, value); end

  # source://rack/3.0.0/lib/rack/response.rb#364
  def status; end

  # source://rack/3.0.0/lib/rack/response.rb#364
  def status=(_arg0); end
end

# source://rack/3.0.0/lib/rack/response.rb#29
Rack::Response::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

class Rack::RewindableInput
  # source://rack/3.0.0/lib/rack/rewindable_input.rb#29
  def initialize(io); end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#65
  def close; end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#45
  def each(&block); end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#35
  def gets; end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#40
  def read(*args); end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#50
  def rewind; end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#55
  def size; end

  private

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#109
  def filesystem_has_posix_semantics?; end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#78
  def make_rewindable; end
end

class Rack::RewindableInput::Middleware
  # source://rack/3.0.0/lib/rack/rewindable_input.rb#19
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/rewindable_input.rb#23
  def call(env); end
end

class Rack::Runtime
  # source://rack/3.0.0/lib/rack/runtime.rb#16
  def initialize(app, name = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/runtime.rb#22
  def call(env); end
end

# source://rack/3.0.0/lib/rack/runtime.rb#13
Rack::Runtime::FORMAT_STRING = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/runtime.rb#14
Rack::Runtime::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#11
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#14
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#15
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#13
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#24
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

class Rack::Sendfile
  # source://rack/3.0.0/lib/rack/sendfile.rb#105
  def initialize(app, variation = T.unsafe(nil), mappings = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/sendfile.rb#113
  def call(env); end

  private

  # source://rack/3.0.0/lib/rack/sendfile.rb#154
  def map_accel_path(env, path); end

  # source://rack/3.0.0/lib/rack/sendfile.rb#148
  def variation(env); end
end

class Rack::ShowExceptions
  # source://rack/3.0.0/lib/rack/show_exceptions.rb#22
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#26
  def call(env); end

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#61
  def dump_exception(exception); end

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#112
  def h(obj); end

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#52
  def prefers_plaintext?(env); end

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#72
  def pretty(env, exception); end

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#108
  def template; end

  private

  # source://rack/3.0.0/lib/rack/show_exceptions.rb#56
  def accepts_html?(env); end
end

# source://rack/3.0.0/lib/rack/show_exceptions.rb#20
Rack::ShowExceptions::CONTEXT = T.let(T.unsafe(nil), Integer)

# source://rack/3.0.0/lib/rack/show_exceptions.rb#127
Rack::ShowExceptions::TEMPLATE = T.let(T.unsafe(nil), ERB)

class Rack::ShowStatus
  # source://rack/3.0.0/lib/rack/show_status.rb#19
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/show_status.rb#24
  def call(env); end

  # source://rack/3.0.0/lib/rack/show_status.rb#54
  def h(obj); end
end

# source://rack/3.0.0/lib/rack/show_status.rb#69
Rack::ShowStatus::TEMPLATE = T.let(T.unsafe(nil), String)

class Rack::Static
  # source://rack/3.0.0/lib/rack/static.rb#93
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/static.rb#109
  def add_index_root?(path); end

  # source://rack/3.0.0/lib/rack/static.rb#166
  def applicable_rules(path); end

  # source://rack/3.0.0/lib/rack/static.rb#125
  def call(env); end

  # source://rack/3.0.0/lib/rack/static.rb#121
  def can_serve(path); end

  # source://rack/3.0.0/lib/rack/static.rb#113
  def overwrite_file_path(path); end

  # source://rack/3.0.0/lib/rack/static.rb#117
  def route_file(path); end
end

# source://rack/3.0.0/lib/rack/constants.rb#37
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#25
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

class Rack::TempfileReaper
  # source://rack/3.0.0/lib/rack/tempfile_reaper.rb#12
  def initialize(app); end

  # source://rack/3.0.0/lib/rack/tempfile_reaper.rb#16
  def call(env); end
end

module Rack::Test
  class << self
    # Whether the version of rack in use handles encodings.
    #
    # @return [Boolean]
    #
    # source://rack-test//lib/rack/test.rb#407
    def encoding_aware_strings?; end
  end
end

# Represents individual cookies in the cookie jar.  This is considered private
# API and behavior of this class can change at any time.
class Rack::Test::Cookie
  include ::Rack::Utils

  # @return [Cookie] a new instance of Cookie
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#23
  def initialize(raw, uri = T.unsafe(nil), default_host = T.unsafe(nil)); end

  # Order cookies by name, path, and domain.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#107
  def <=>(other); end

  # The explicit or implicit domain for the cookie.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#58
  def domain; end

  # Whether the cookie has a value.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#53
  def empty?; end

  # Whether the cookie is currently expired.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#85
  def expired?; end

  # A Time value for when the cookie expires, if the expires option is set.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#80
  def expires; end

  # Whether the cookie has the httponly flag, indicating it is not available via
  # a javascript API.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#70
  def http_only?; end

  # Cookies that do not match the URI will not be sent in requests to the URI.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#102
  def matches?(uri); end

  # The name of the cookie, will be a string
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#14
  def name; end

  # The explicit or implicit path for the cookie.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#75
  def path; end

  # The raw string for the cookie, without options. Will generally be in
  # name=value format is name and value are provided.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#21
  def raw; end

  # Wether the given cookie can replace the current cookie in the cookie jar.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#48
  def replaces?(other); end

  # Whether the cookie has the secure flag, indicating it can only be sent over
  # an encrypted connection.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#64
  def secure?; end

  # A hash of cookie options, including the cookie value, but excluding the cookie name.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#112
  def to_h; end

  # A hash of cookie options, including the cookie value, but excluding the cookie name.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#112
  def to_hash; end

  # Whether the cookie is valid for the given URI.
  #
  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#90
  def valid?(uri); end

  # The value of the cookie, will be a string or nil if there is no value.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#17
  def value; end

  private

  # The default URI to use for the cookie, including just the host.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#124
  def default_uri; end
end

# Represents all cookies for a session, handling adding and
# removing cookies, and finding which cookies apply to a given
# request.  This is considered private API and behavior of this
# class can change at any time.
class Rack::Test::CookieJar
  # @return [CookieJar] a new instance of CookieJar
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#136
  def initialize(cookies = T.unsafe(nil), default_host = T.unsafe(nil)); end

  # Add a Cookie to the cookie jar.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#192
  def <<(new_cookie); end

  # Return the value for first cookie with the given name, or nil
  # if no such cookie exists.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#143
  def [](name); end

  # Set a cookie with the given name and value in the
  # cookie jar.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#153
  def []=(name, value); end

  # Delete all cookies with the given name from the cookie jar.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#167
  def delete(name); end

  # Return a raw cookie string for the cookie header to
  # use for the given URI.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#203
  def for(uri); end

  # Return the first cookie with the given name, or nil if
  # no such cookie exists.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#159
  def get_cookie(name); end

  # Add a string of raw cookie information to the cookie jar,
  # if the cookie is valid for the given URI.
  # Cookies should be separated with a newline.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#177
  def merge(raw_cookies, uri = T.unsafe(nil)); end

  # Return a hash cookie names and cookie values for cookies in the jar.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#220
  def to_hash; end

  private

  # Yield each cookie that matches for the URI.
  #
  # The cookies are sorted by most specific first. So, we loop through
  # all the cookies in order and add it to a hash by cookie name if
  # the cookie can be sent to the current URI. It's added to the hash
  # so that when we are done, the cookies will be unique by name and
  # we'll have grabbed the most specific to the URI.
  #
  # source://rack-test//lib/rack/test/cookie_jar.rb#239
  def each_cookie_for(uri); end
end

# source://rack-test//lib/rack/test/cookie_jar.rb#134
Rack::Test::CookieJar::DELIMITER = T.let(T.unsafe(nil), String)

# The default host to use for requests, when a full URI is not
# provided.
#
# source://rack-test//lib/rack/test.rb#33
Rack::Test::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# The ending boundary in multipart requests
#
# source://rack-test//lib/rack/test.rb#42
Rack::Test::END_BOUNDARY = T.let(T.unsafe(nil), String)

# The common base class for exceptions raised by Rack::Test
class Rack::Test::Error < ::StandardError; end

# The default multipart boundary to use for multipart request bodies
#
# source://rack-test//lib/rack/test.rb#36
Rack::Test::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# This module serves as the primary integration point for using Rack::Test
# in a testing environment. It depends on an app method being defined in the
# same context, and provides the Rack::Test API methods (see Rack::Test::Session
# for their documentation). It defines the following methods that are delegated
# to the current session: :request, :get, :post, :put, :patch, :delete, :options,
# :head, :custom_request, :follow_redirect!, :header, :env, :set_cookie,
# :clear_cookies, :authorize, :basic_authorize, :last_response, and :last_request.
#
# Example:
#
#   class HomepageTest < Test::Unit::TestCase
#     include Rack::Test::Methods
#
#     def app
#       MyApp
#     end
#   end
module Rack::Test::Methods
  extend ::Forwardable

  # Private accessor to avoid uninitialized instance variable warning in Ruby 2.*
  #
  # source://rack-test//lib/rack/test/methods.rb#91
  def _rack_test_current_session=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def authorize(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def basic_authorize(*args, **_arg1, &block); end

  # Create a new Rack::Test::Session for #app.
  #
  # source://rack-test//lib/rack/test/methods.rb#40
  def build_rack_test_session(_name); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def clear_cookies(*args, **_arg1, &block); end

  # Return the currently actively session.  This is the session to
  # which the delegated methods are sent.
  #
  # source://rack-test//lib/rack/test/methods.rb#51
  def current_session; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def custom_request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def delete(*args, **_arg1, &block); end

  # source://rack-test//lib/rack/test/methods.rb#64
  def digest_authorize(username, password); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def env(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def follow_redirect!(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def get(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def head(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def header(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def last_request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def last_response(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def options(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def patch(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def post(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def put(*args, **_arg1, &block); end

  # Return the existing session with the given name, or a new
  # rack session.  Always use a new session if name is nil.
  # For backwards compatibility with older rack-test versions.
  #
  # source://rack-test//lib/rack/test/methods.rb#29
  def rack_mock_session(name = T.unsafe(nil)); end

  # Return the existing session with the given name, or a new
  # rack session.  Always use a new session if name is nil.
  #
  # source://rack-test//lib/rack/test/methods.rb#29
  def rack_test_session(name = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_cookie(*args, **_arg1, &block); end

  # Create a new session (or reuse an existing session with the given name),
  # and make it the current session for the given block.
  #
  # source://rack-test//lib/rack/test/methods.rb#57
  def with_session(name); end

  private

  # Private accessor to avoid uninitialized instance variable warning in Ruby 2.*
  #
  # source://rack-test//lib/rack/test/methods.rb#91
  def _rack_test_current_session; end
end

# The starting boundary in multipart requests
#
# source://rack-test//lib/rack/test.rb#39
Rack::Test::START_BOUNDARY = T.let(T.unsafe(nil), String)

# Rack::Test::Session handles a series of requests issued to a Rack app.
# It keeps track of the cookies for the session, and allows for setting headers
# and a default rack environment that is used for future requests.
#
# Rack::Test::Session's methods are most often called through Rack::Test::Methods,
# which will automatically build a session when it's first used.
class Rack::Test::Session
  include ::Rack::Utils
  include ::Rack::Test::Utils
  extend ::Forwardable

  # Creates a Rack::Test::Session for a given Rack app or Rack::Test::BasicSession.
  #
  # Note: Generally, you won't need to initialize a Rack::Test::Session directly.
  # Instead, you should include Rack::Test::Methods into your testing context.
  # (See README.rdoc for an example)
  #
  # The following methods are defined via metaprogramming: get, post, put, patch,
  # delete, options, and head. Each method submits a request with the given request
  # method, with the given URI and optional parameters and rack environment.
  # Examples:
  #
  #   # URI only:
  #   get("/")                   # GET /
  #   get("/?foo=bar")           # GET /?foo=bar
  #
  #   # URI and parameters
  #   get("/foo", 'bar'=>'baz')  # GET /foo?bar=baz
  #   post("/foo", 'bar'=>'baz') # POST /foo (bar=baz in request body)
  #
  #   # URI, parameters, and rack environment
  #   get("/bar", {}, 'CONTENT_TYPE'=>'foo')
  #   get("/bar", {'foo'=>'baz'}, 'HTTP_ACCEPT'=>'*')
  #
  # The above methods as well as #request and #custom_request store the Rack::Request
  # submitted in #last_request. The methods store a Rack::MockResponse based on the
  # response in #last_response. #last_response is also returned by the methods.
  # If a block is given, #last_response is also yielded to the block.
  #
  # @return [Session] a new instance of Session
  #
  # source://rack-test//lib/rack/test.rb#99
  def initialize(app, default_host = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test.rb#217
  def _digest_authorize(username, password); end

  # Run a block after the each request completes.
  #
  # source://rack-test//lib/rack/test.rb#120
  def after_request(&block); end

  # Set the username and password for HTTP Basic authorization, to be
  # included in subsequent requests in the HTTP_AUTHORIZATION header.
  #
  # Example:
  #   basic_authorize "bryan", "secret"
  #
  # source://rack-test//lib/rack/test.rb#200
  def authorize(username, password); end

  # Set the username and password for HTTP Basic authorization, to be
  # included in subsequent requests in the HTTP_AUTHORIZATION header.
  #
  # Example:
  #   basic_authorize "bryan", "secret"
  #
  # source://rack-test//lib/rack/test.rb#200
  def basic_authorize(username, password); end

  # Replace the current cookie jar with an empty cookie jar.
  #
  # source://rack-test//lib/rack/test.rb#125
  def clear_cookies; end

  # The Rack::Test::CookieJar for the cookies for the current session.
  #
  # source://rack-test//lib/rack/test.rb#67
  def cookie_jar; end

  # The Rack::Test::CookieJar for the cookies for the current session.
  #
  # source://rack-test//lib/rack/test.rb#67
  def cookie_jar=(_arg0); end

  # Issue a request using the given HTTP verb for the given URI, with optional
  # params and rack environment.  Example:
  #
  #   custom_request "LINK", "/"
  #
  # source://rack-test//lib/rack/test.rb#162
  def custom_request(verb, uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # The default host used for the session for when using paths for URIs.
  #
  # source://rack-test//lib/rack/test.rb#70
  def default_host; end

  # source://rack-test//lib/rack/test.rb#113
  def delete(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # Set the username and password for HTTP Digest authorization, to be
  # included in subsequent requests in the HTTP_AUTHORIZATION header.
  # This method is deprecated and will be removed in rack-test 2.1
  #
  # Example:
  #   digest_authorize "bryan", "secret"
  #
  # source://rack-test//lib/rack/test.rb#213
  def digest_authorize(username, password); end

  # Set an entry in the rack environment to be included on all subsequent
  # requests through the session. Use a value of nil to remove a previously
  # value.  Example:
  #
  #   env "rack.session", {:csrf => 'token'}
  #
  # source://rack-test//lib/rack/test.rb#187
  def env(name, value); end

  # Rack::Test will not follow any redirects automatically. This method
  # will follow the redirect returned (including setting the Referer header
  # on the new request) in the last response. If the last response was not
  # a redirect, an error will be raised.
  #
  # source://rack-test//lib/rack/test.rb#226
  def follow_redirect!; end

  # source://rack-test//lib/rack/test.rb#113
  def get(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#113
  def head(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # Set a header to be included on all subsequent requests through the
  # session. Use a value of nil to remove a previously configured header.
  #
  # In accordance with the Rack spec, headers will be included in the Rack
  # environment hash in HTTP_USER_AGENT form.  Example:
  #
  #   header "user-agent", "Firefox"
  #
  # source://rack-test//lib/rack/test.rb#175
  def header(name, value); end

  # Return the last request issued in the session. Raises an error if no
  # requests have been sent yet.
  #
  # @raise [Error]
  #
  # source://rack-test//lib/rack/test.rb#136
  def last_request; end

  # Return the last response received in the session. Raises an error if
  # no requests have been sent yet.
  #
  # @raise [Error]
  #
  # source://rack-test//lib/rack/test.rb#143
  def last_response; end

  # source://rack-test//lib/rack/test.rb#113
  def options(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#113
  def patch(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#113
  def post(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#113
  def put(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # Issue a request to the Rack app for the given URI and optional Rack
  # environment.  Example:
  #
  #   request "/"
  #
  # source://rack-test//lib/rack/test.rb#152
  def request(uri, env = T.unsafe(nil), &block); end

  # Set a cookie in the current cookie jar.
  #
  # source://rack-test//lib/rack/test.rb#130
  def set_cookie(cookie, uri = T.unsafe(nil)); end

  private

  # Append a string version of the query params to the array of query params.
  #
  # source://rack-test//lib/rack/test.rb#338
  def append_query_params(query_array, query_params); end

  # close() gets called automatically in newer Rack versions.
  #
  # source://rack-test//lib/rack/test.rb#264
  def close_body(body); end

  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test.rb#401
  def digest_auth_configured?; end

  # source://rack-test//lib/rack/test.rb#378
  def digest_auth_header; end

  # Update environment to use based on given URI.
  #
  # source://rack-test//lib/rack/test.rb#291
  def env_for(uri, env); end

  # Return the multipart content type to use based on the environment.
  #
  # source://rack-test//lib/rack/test.rb#344
  def multipart_content_type(env); end

  # Normalize URI based on given URI/path and environment.
  #
  # source://rack-test//lib/rack/test.rb#269
  def parse_uri(path, env); end

  # Submit the request with the given URI and rack environment to
  # the mock session.  Returns and potentially yields the last response.
  #
  # source://rack-test//lib/rack/test.rb#355
  def process_request(uri, env); end

  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test.rb#395
  def retry_with_digest_auth?(env); end

  class << self
    # source://rack-test//lib/rack/test.rb#57
    def new(app, default_host = T.unsafe(nil)); end
  end
end

# source://rack-test//lib/rack/test.rb#277
Rack::Test::Session::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# Wraps a Tempfile with a content type. Including one or more UploadedFile's
# in the params causes Rack::Test to build and issue a multipart request.
#
# Example:
#   post "/photos", "file" => Rack::Test::UploadedFile.new("me.jpg", "image/jpeg")
class Rack::Test::UploadedFile
  # Creates a new UploadedFile instance.
  #
  # Arguments:
  # content :: is a path to a file, or an {IO} or {StringIO} object representing the content.
  # content_type :: MIME type of the file
  # binary :: Whether the file should be set to binmode (content treated as binary).
  # original_filename :: The filename to use for the file if +content+ is a StringIO.
  #
  # @return [UploadedFile] a new instance of UploadedFile
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#31
  def initialize(content, content_type = T.unsafe(nil), binary = T.unsafe(nil), original_filename: T.unsafe(nil)); end

  # Append to given buffer in 64K chunks to avoid multiple large
  # copies of file data in memory.  Rewind tempfile before and
  # after to make sure all data in tempfile is appended to the
  # buffer.
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#58
  def append_to(buffer); end

  # The content type of the "uploaded" file
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#22
  def content_type; end

  # The content type of the "uploaded" file
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#22
  def content_type=(_arg0); end

  # The path to the tempfile. Will not work if the receiver's content is from a StringIO.
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#44
  def local_path; end

  # Delegate all methods not handled to the tempfile.
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#50
  def method_missing(method_name, *args, &block); end

  # The filename, *not* including the path, of the "uploaded" file
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#16
  def original_filename; end

  # The path to the tempfile. Will not work if the receiver's content is from a StringIO.
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#44
  def path; end

  # The tempfile
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#19
  def tempfile; end

  private

  # Create a tempfile and copy the content from the given path into the tempfile.
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#94
  def initialize_from_file_path(path); end

  # Use the StringIO as the tempfile.
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#88
  def initialize_from_stringio(stringio, original_filename); end

  # @return [Boolean]
  #
  # source://rack-test//lib/rack/test/uploaded_file.rb#69
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # Close and unlink the given file, used as a finalizer for the tempfile,
    # if the tempfile is backed by a file in the filesystem.
    #
    # source://rack-test//lib/rack/test/uploaded_file.rb#80
    def actually_finalize(file); end

    # A proc that can be used as a finalizer to close and unlink the tempfile.
    #
    # source://rack-test//lib/rack/test/uploaded_file.rb#74
    def finalize(file); end
  end
end

module Rack::Test::Utils
  include ::Rack::Utils
  extend ::Rack::Utils
  extend ::Rack::Test::Utils

  # Build a multipart body for the given params.
  #
  # @raise [ArgumentError]
  #
  # source://rack-test//lib/rack/test/utils.rb#34
  def build_multipart(params, _first = T.unsafe(nil), multipart = T.unsafe(nil)); end

  # Build a query string for the given value and prefix. The value
  # can be an array or hash of parameters.
  #
  # source://rack-test//lib/rack/test/utils.rb#11
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  private

  # Append each multipart parameter value to the buffer.
  #
  # source://rack-test//lib/rack/test/utils.rb#100
  def _build_parts(buffer, parameters); end

  # Append the multipart fragment for a parameter that is a file upload to the buffer.
  #
  # source://rack-test//lib/rack/test/utils.rb#133
  def build_file_part(buffer, parameter_name, uploaded_file); end

  # Build the multipart content for uploading.
  #
  # source://rack-test//lib/rack/test/utils.rb#94
  def build_parts(buffer, parameters); end

  # Append the multipart fragment for a parameter that isn't a file upload to the buffer.
  #
  # source://rack-test//lib/rack/test/utils.rb#121
  def build_primitive_part(buffer, parameter_name, value); end

  # Return a flattened hash of parameter values based on the given params.
  #
  # source://rack-test//lib/rack/test/utils.rb#62
  def normalize_multipart_params(params, first = T.unsafe(nil)); end
end

# source://rack-test//lib/rack/test/version.rb#3
Rack::Test::VERSION = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/constants.rb#36
Rack::UNLINK = T.let(T.unsafe(nil), String)

class Rack::URLMap
  # source://rack/3.0.0/lib/rack/urlmap.rb#21
  def initialize(map = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/urlmap.rb#48
  def call(env); end

  # source://rack/3.0.0/lib/rack/urlmap.rb#25
  def remap(map); end

  private

  # source://rack/3.0.0/lib/rack/urlmap.rb#87
  def casecmp?(v1, v2); end
end

module Rack::Utils
  private

  # source://rack/3.0.0/lib/rack/utils.rb#243
  def add_cookie_to_header(header, key, value); end

  # source://rack/3.0.0/lib/rack/utils.rb#378
  def add_remove_cookie_to_header(header, key, value = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#162
  def best_q_match(q_value_header, available_mimes); end

  # source://rack/3.0.0/lib/rack/utils.rb#116
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#106
  def build_query(params); end

  # source://rack/3.0.0/lib/rack/utils.rb#420
  def byte_ranges(env, size); end

  # source://rack/3.0.0/lib/rack/utils.rb#620
  def clean_path_info(path_info); end

  # source://rack/3.0.0/lib/rack/utils.rb#87
  def clock_time; end

  # source://rack/3.0.0/lib/rack/utils.rb#372
  def delete_cookie_header!(headers, key, value = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#362
  def delete_set_cookie_header(key, value = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#402
  def delete_set_cookie_header!(header, key, value = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#38
  def escape(s); end

  # source://rack/3.0.0/lib/rack/utils.rb#187
  def escape_html(string); end

  # source://rack/3.0.0/lib/rack/utils.rb#44
  def escape_path(s); end

  # source://rack/3.0.0/lib/rack/utils.rb#145
  def forwarded_values(forwarded_header); end

  # source://rack/3.0.0/lib/rack/utils.rb#424
  def get_byte_ranges(http_range, size); end

  # source://rack/3.0.0/lib/rack/utils.rb#366
  def make_delete_cookie_header(header, key, value); end

  # source://rack/3.0.0/lib/rack/utils.rb#267
  def parse_cookies(env); end

  # source://rack/3.0.0/lib/rack/utils.rb#233
  def parse_cookies_header(value); end

  # source://rack/3.0.0/lib/rack/utils.rb#102
  def parse_nested_query(qs, d = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#98
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  # source://rack/3.0.0/lib/rack/utils.rb#134
  def q_values(q_value_header); end

  # source://rack/3.0.0/lib/rack/utils.rb#413
  def rfc2822(time); end

  # source://rack/3.0.0/lib/rack/utils.rb#460
  def secure_compare(a, b); end

  # source://rack/3.0.0/lib/rack/utils.rb#191
  def select_best_encoding(available_encodings, accept_encoding); end

  # source://rack/3.0.0/lib/rack/utils.rb#294
  def set_cookie_header(key, value); end

  # source://rack/3.0.0/lib/rack/utils.rb#336
  def set_cookie_header!(headers, key, value); end

  # source://rack/3.0.0/lib/rack/utils.rb#610
  def status_code(status); end

  # source://rack/3.0.0/lib/rack/utils.rb#56
  def unescape(s, encoding = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#50
  def unescape_path(s); end

  # source://rack/3.0.0/lib/rack/utils.rb#637
  def valid_path?(path); end

  class << self
    # source://rack/3.0.0/lib/rack/utils.rb#243
    def add_cookie_to_header(header, key, value); end

    # source://rack/3.0.0/lib/rack/utils.rb#378
    def add_remove_cookie_to_header(header, key, value = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#162
    def best_q_match(q_value_header, available_mimes); end

    # source://rack/3.0.0/lib/rack/utils.rb#116
    def build_nested_query(value, prefix = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#106
    def build_query(params); end

    # source://rack/3.0.0/lib/rack/utils.rb#420
    def byte_ranges(env, size); end

    # source://rack/3.0.0/lib/rack/utils.rb#620
    def clean_path_info(path_info); end

    # source://rack/3.0.0/lib/rack/utils.rb#87
    def clock_time; end

    # source://rack/3.0.0/lib/rack/utils.rb#28
    def default_query_parser; end

    # source://rack/3.0.0/lib/rack/utils.rb#28
    def default_query_parser=(_arg0); end

    # source://rack/3.0.0/lib/rack/utils.rb#372
    def delete_cookie_header!(headers, key, value = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#362
    def delete_set_cookie_header(key, value = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#402
    def delete_set_cookie_header!(header, key, value = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#38
    def escape(s); end

    # source://rack/3.0.0/lib/rack/utils.rb#187
    def escape_html(string); end

    # source://rack/3.0.0/lib/rack/utils.rb#44
    def escape_path(s); end

    # source://rack/3.0.0/lib/rack/utils.rb#145
    def forwarded_values(forwarded_header); end

    # source://rack/3.0.0/lib/rack/utils.rb#424
    def get_byte_ranges(http_range, size); end

    # source://rack/3.0.0/lib/rack/utils.rb#77
    def key_space_limit; end

    # source://rack/3.0.0/lib/rack/utils.rb#82
    def key_space_limit=(v); end

    # source://rack/3.0.0/lib/rack/utils.rb#366
    def make_delete_cookie_header(header, key, value); end

    # source://rack/3.0.0/lib/rack/utils.rb#61
    def multipart_part_limit; end

    # source://rack/3.0.0/lib/rack/utils.rb#61
    def multipart_part_limit=(_arg0); end

    # source://rack/3.0.0/lib/rack/utils.rb#69
    def param_depth_limit; end

    # source://rack/3.0.0/lib/rack/utils.rb#73
    def param_depth_limit=(v); end

    # source://rack/3.0.0/lib/rack/utils.rb#267
    def parse_cookies(env); end

    # source://rack/3.0.0/lib/rack/utils.rb#233
    def parse_cookies_header(value); end

    # source://rack/3.0.0/lib/rack/utils.rb#102
    def parse_nested_query(qs, d = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#98
    def parse_query(qs, d = T.unsafe(nil), &unescaper); end

    # source://rack/3.0.0/lib/rack/utils.rb#134
    def q_values(q_value_header); end

    # source://rack/3.0.0/lib/rack/utils.rb#413
    def rfc2822(time); end

    # source://rack/3.0.0/lib/rack/utils.rb#460
    def secure_compare(a, b); end

    # source://rack/3.0.0/lib/rack/utils.rb#191
    def select_best_encoding(available_encodings, accept_encoding); end

    # source://rack/3.0.0/lib/rack/utils.rb#294
    def set_cookie_header(key, value); end

    # source://rack/3.0.0/lib/rack/utils.rb#336
    def set_cookie_header!(headers, key, value); end

    # source://rack/3.0.0/lib/rack/utils.rb#610
    def status_code(status); end

    # source://rack/3.0.0/lib/rack/utils.rb#56
    def unescape(s, encoding = T.unsafe(nil)); end

    # source://rack/3.0.0/lib/rack/utils.rb#50
    def unescape_path(s); end

    # source://rack/3.0.0/lib/rack/utils.rb#637
    def valid_path?(path); end
  end
end

# source://rack/3.0.0/lib/rack/utils.rb#24
Rack::Utils::COMMON_SEP = T.let(T.unsafe(nil), Hash)

class Rack::Utils::Context
  # source://rack/3.0.0/lib/rack/utils.rb#486
  def initialize(app_f, app_r); end

  # source://rack/3.0.0/lib/rack/utils.rb#484
  def app; end

  # source://rack/3.0.0/lib/rack/utils.rb#491
  def call(env); end

  # source://rack/3.0.0/lib/rack/utils.rb#499
  def context(env, app = T.unsafe(nil)); end

  # source://rack/3.0.0/lib/rack/utils.rb#484
  def for; end

  # source://rack/3.0.0/lib/rack/utils.rb#495
  def recontext(app); end
end

# source://rack/3.0.0/lib/rack/utils.rb#23
Rack::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/utils.rb#175
Rack::Utils::ESCAPE_HTML = T.let(T.unsafe(nil), Hash)

# source://rack/3.0.0/lib/rack/utils.rb#184
Rack::Utils::ESCAPE_HTML_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/utils.rb#537
Rack::Utils::HTTP_STATUS_CODES = T.let(T.unsafe(nil), Hash)

class Rack::Utils::HeaderHash < ::Hash
  class << self
    # source://rack/3.0.0/lib/rack/utils.rb#509
    def [](headers); end

    # source://rack/3.0.0/lib/rack/utils.rb#527
    def allocate; end

    # source://rack/3.0.0/lib/rack/utils.rb#520
    def new(hash = T.unsafe(nil)); end
  end
end

# source://rack/3.0.0/lib/rack/utils.rb#21
Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

# source://rack/3.0.0/lib/rack/utils.rb#25
Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

# source://rack/3.0.0/lib/rack/utils.rb#635
Rack::Utils::NULL_BYTE = T.let(T.unsafe(nil), String)

# source://rack/3.0.0/lib/rack/utils.rb#618
Rack::Utils::PATH_SEPS = T.let(T.unsafe(nil), Regexp)

# source://rack/3.0.0/lib/rack/utils.rb#20
Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

# source://rack/3.0.0/lib/rack/utils.rb#22
Rack::Utils::ParamsTooDeepError = Rack::QueryParser::ParamsTooDeepError

# source://rack/3.0.0/lib/rack/utils.rb#604
Rack::Utils::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://rack/3.0.0/lib/rack/utils.rb#606
Rack::Utils::SYMBOL_TO_STATUS_CODE = T.let(T.unsafe(nil), Hash)

# source://rack/3.0.0/lib/rack/version.rb#16
Rack::VERSION = T.let(T.unsafe(nil), Array)

# source://rack/3.0.0/lib/rack/version.rb#19
Rack::VERSION_STRING = T.let(T.unsafe(nil), String)
